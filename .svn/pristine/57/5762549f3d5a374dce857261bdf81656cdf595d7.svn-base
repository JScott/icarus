// TODO: add Time.deltaTime to all player movements

// Require a character controller to be attached to the same game object
@script RequireComponent(CharacterController)

public var idleAnimation : AnimationClip;
public var walkAnimation : AnimationClip;
public var runAnimation : AnimationClip;
public var jumpPoseAnimation : AnimationClip;

public var forwardWind : ParticleEmitter;
public var upwardWind : ParticleEmitter;

public var walkMaxAnimationSpeed : float = 0.75;
public var runMaxAnimationSpeed : float = 1.0;
public var jumpAnimationSpeed : float = 1.15;
public var landAnimationSpeed : float = 1.0;

private var _animation : Animation;
private var _target : GameObject;
private var allInteractives : GameObject[];

var shadow : Projector;
private var pushSphere;

enum CharacterState {
	Idle = 0,
	Walking = 1,
	Running = 2,
	Jumping = 3,
}

private var _characterState : CharacterState;

// The speed when walking
var walkSpeed = 15.0;

var inAirControlAcceleration = 3.0;

// How high do we jump when pressing jump and letting go immediately
var jumpHeight = 0.5;
var doubleJumpHeight = 1.0;
private var ledgeGrace = 1.0;

// The gravity for the character
var gravity = 20.0;


var speedSmoothing = 10.0;
var rotateSpeed = 500.0;

// The percentage speed when double jumping or hovering
var doubleJumpDrag = 0.8;

// The time we can hover and how slow we fall
var hoverFallDrag = 0.5;
var hoverTimeout = 0.5;
var hoverUpwardSpeed = 0.05;
var hoverStartFallDrag = 0.5;
var maxHoverUpwardSpeed = 1.0;
private var hoverTimeoutCounter = -1.0;

var canJump = true;
var canDoubleJump = true;
var canHover = true;

private var jumpRepeatTime = 0.05;
private var jumpTimeout = 0.15;
private var groundedTimeout = 0.25;

// The camera doesnt start following the target immediately but waits for a split second to avoid too much waving around.
private var lockCameraTimer = 0.0;

// The current move direction in x-z
private var moveDirection = Vector3.zero;
// The current vertical speed
private var verticalSpeed = 0.0;
// The current x-z move speed
private var moveSpeed = 0.0;
var maxInAirSpeed = 3.0;

var angleOfOneEighty = 40; // The grace we give for the player to stop in place and flip around

var pushChargeSpeed = 3.0; // Grows between 0-1
private var pushChargeTimer = 0.0;

// The last collision flags returned from controller.Move
private var collisionFlags : CollisionFlags;

// Are we jumping? (Initiated with jump button and not grounded yet)
private var jumping = false;
private var jumpingReachedApex = false;
private var doubleJumping = false;
private var hovering = false;
private var talking = false;
private var pushing = false;

// Are we moving backwards (This locks the camera to not do a 180 degree spin)
private var movingBack = false;
// Is the user pressing any keys?
private var isMoving = false;
// Last time the jump button was clicked down
private var lastJumpButtonTime = -10.0;
// Last time we performed a jump
private var lastJumpTime = -1.0;


// the height we jumped from (Used to determine for how long to apply extra jump power after jumping.)
private var lastJumpStartHeight = 0.0;


private var inAirVelocity = Vector3.zero;

private var lastGroundedTime = 0.0;


private var isControllable = true;

function OnEnable() {
	allInteractives = GameObject.FindGameObjectsWithTag("Interactive"); 
	
	// find 'invisible' physics (representing cavities) and disable collision
	var gos : GameObject[];
	gos = GameObject.FindGameObjectsWithTag("AI Borders"); 
	
	for (var go : GameObject in gos)  { 
	    Physics.IgnoreCollision(go.collider, collider);
	    go.renderer.material.color.a = 0;
	}
}

function Awake ()
{
	hoverTimeoutCounter = hoverTimeout;
	moveDirection = transform.TransformDirection(Vector3.forward);
	
	pushSphere = GameObject.Find("PushSphere").GetComponent(PushSphere);
	
	_animation = GetComponent(Animation);
	if(!_animation)
	Debug.Log("The character you would like to control doesn't have animations. Moving her might look weird.");
	
	/*
	public var idleAnimation : AnimationClip;
	public var walkAnimation : AnimationClip;
	public var runAnimation : AnimationClip;
	public var jumpPoseAnimation : AnimationClip;
	*/
	if(!idleAnimation) {
		_animation = null;
		Debug.Log("No idle animation found. Turning off animations.");
	}
	if(!walkAnimation) {
		_animation = null;
		Debug.Log("No walk animation found. Turning off animations.");
	}
	if(!runAnimation) {
		_animation = null;
		Debug.Log("No run animation found. Turning off animations.");
	}
	if(!jumpPoseAnimation && canJump) {
		_animation = null;
		Debug.Log("No jump animation found and the character has canJump enabled. Turning off animations.");
	}
	
}


function UpdateSmoothedMovementDirection ()
{
	var cameraTransform = Camera.main.transform;
	var grounded = IsGrounded();
	
	// Forward vector relative to the camera along the x-z plane
	var forward = cameraTransform.TransformDirection(Vector3.forward);
	forward.y = 0;
	forward = forward.normalized;
	
	// Right vector relative to the camera
	// Always orthogonal to the forward vector
	var right = Vector3(forward.z, 0, -forward.x);
	
	var v = Input.GetAxisRaw("Vertical");
	var h = Input.GetAxisRaw("Horizontal");
	
	// Are we moving backwards or looking backwards
	/*if (v < -0.2)
	movingBack = true;
	else
	movingBack = false;
	*/
	var wasMoving = isMoving;
	isMoving = Mathf.Abs (h) > 0.1 || Mathf.Abs (v) > 0.1;
	
	// Target direction relative to the camera
	var targetDirection = h * right + v * forward;
	
	// Grounded controls
	if (grounded)
	{
		// Lock camera for short period when transitioning moving & standing still
		lockCameraTimer += Time.deltaTime;
		if (isMoving != wasMoving)
		lockCameraTimer = 0.0;
		
		
		// Smooth the speed based on the current target direction
		var curSmooth = speedSmoothing * Time.deltaTime;
		
		
		var turning = false;	
			
		// Choose target speed
		//* We want to support analog input but make sure you cant walk faster diagonally than just forward or sideways
		var targetSpeed = Mathf.Min(targetDirection.magnitude, 1.0);
		// TODO: replace with dash
		//targetSpeed *= runSpeed;
		//_characterState = CharacterState.Running;
		targetSpeed *= walkSpeed;
		_characterState = CharacterState.Walking;
		_characterState = CharacterState.Idle;

		// We store speed and direction seperately,
		// so that when the character stands still we still have a valid forward direction
		// moveDirection is always normalized, and we only update it if there is user input.
		if (targetDirection != Vector3.zero)
		{
			var moveVec = moveDirection * moveSpeed;
			var targetVec = targetDirection * targetSpeed;
			var actualVec = Vector3.Lerp(moveVec, targetVec, curSmooth);
			moveSpeed = Mathf.Min(actualVec.magnitude, walkSpeed);
			
			// If it's within some degrees of behind us
			// then just move directly backward
			// This will avoid the awkward instant spin-around
			var angle = Mathf.Acos(Vector3.Dot(targetDirection, moveDirection)) * Mathf.Rad2Deg;
			if (!float.IsNaN(angle) && angle > 180 - angleOfOneEighty)
			{
				if (moveSpeed <= 0.5)
					moveDirection = -moveDirection;
			}
			else
				moveDirection = actualVec.normalized;
			
		/*
			// If we are going the opposite direction, skid stop and turn
			var angle = Mathf.Acos(Vector3.Dot(targetDirection, moveDirection)) * Mathf.Rad2Deg;
			if (!float.IsNaN(angle) && angle > 170 && grounded)
			{
				turning = true;
				//moveDirection = Vector3.Lerp(moveDirection, targetDirection.normalized, curSmooth);
				//moveDirection = moveDirection.normalized;
				
				if (moveSpeed <= 1)
					moveDirection = targetDirection.normalized;
			}
			// Otherwise smoothly turn towards it
			else
			{
				moveDirection = Vector3.RotateTowards(moveDirection, targetDirection, rotateSpeed * Mathf.Deg2Rad * Time.deltaTime, 1000);
				moveDirection = moveDirection.normalized;
			}*/
		}
		
		
		// THISTHISHTHIS!!!
		else
			moveSpeed = Mathf.Lerp(moveSpeed, targetSpeed, curSmooth);
	}
	// In air controls
	else if (!IsGrounded())
	{
		// Lock camera while in air
		if (jumping || doubleJumping)
		lockCameraTimer = 0.0;
		
		// Restrict air movement
		if (isMoving)
		{
			inAirVelocity += targetDirection.normalized * Time.deltaTime * inAirControlAcceleration;
			//inAirVelocity = Vector3.Project(inAirVelocity, transform.right);
			if (inAirVelocity.magnitude > maxInAirSpeed)
			inAirVelocity = Vector3.Normalize(inAirVelocity)*maxInAirSpeed;
		}
		// Slow down when hovering
		// Dealt with in main movement area
		//if (IsHovering()) moveSpeed = Mathf.Min(moveSpeed, maxInAirSpeed);
	}
	
}


function ApplyJumping ()
{
	// Prevent jumping too fast after each other
	if (lastJumpTime + jumpRepeatTime > Time.time)
	return;
	
	if (IsGrounded() || ledgeGrace > 0) {
		// Jump
		// - Only when pressing the button down
		// - With a timeout so you can press the button slightly before landing
		if (canJump && Time.time < lastJumpButtonTime + jumpTimeout) {
			verticalSpeed = CalculateJumpVerticalSpeed (jumpHeight);
			SendMessage("DidJump", SendMessageOptions.DontRequireReceiver);
		}
	}
	else if (IsJumping() && !IsDoubleJumping())
	{
		if (canDoubleJump && Time.time < lastJumpButtonTime + jumpTimeout)
		{
			verticalSpeed = CalculateJumpVerticalSpeed (doubleJumpHeight);
			SendMessage("DidDoubleJump", SendMessageOptions.DontRequireReceiver);
		}
	}
}

function ApplyGravity ()
{
	if (isControllable)// don't move player at all if not controllable.
	{
		// Apply gravity
		var jumpButton = Input.GetButton("Jump");
		
		// When we reach the apex of the jump we send out a message
		if ((jumping || doubleJumping) && !jumpingReachedApex && verticalSpeed <= 0.0)
		{
			jumpingReachedApex = true;
			SendMessage("DidJumpReachApex", SendMessageOptions.DontRequireReceiver);
		}
		
		if (IsGrounded ()){
			verticalSpeed = 0.0;
			hoverTimeoutCounter = hoverTimeout;
		}
		else
		{
			if (jumpingReachedApex)
			{
				var shouldHover = canHover && IsHovering() && hoverTimeoutCounter > 0;
				if (shouldHover) {
					hoverTimeoutCounter -= Time.deltaTime;
					verticalSpeed += hoverUpwardSpeed;
				}
				else hovering = false;
			}
			var verticalDrag = shouldHover ? hoverFallDrag : 1;
			var modifiedGravity = gravity;
			verticalSpeed -= modifiedGravity * verticalDrag * Time.deltaTime;
		}
	}
}

function CalculateJumpVerticalSpeed (targetJumpHeight : float)
{
	// From the jump height and gravity we deduce the upwards speed
	// for the character to reach at the apex.
	return Mathf.Sqrt(2 * targetJumpHeight * gravity);
}

function DidJump ()
{
	jumping = true;
	jumpingReachedApex = false;
	lastJumpTime = Time.time;
	lastJumpStartHeight = transform.position.y;
	lastJumpButtonTime = -10;
	
	_characterState = CharacterState.Jumping;
}

function DidDoubleJump()
{
	doubleJumping = true;
	jumpingReachedApex = false;
	//lastJumpTime = Time.time;
	//lastJumpStartHeight = transform.position.y;
	//lastJumpButtonTime = -10;
	_characterState = CharacterState.Jumping;
	SmokePuff();
}

function SmokePuff()
{
	upwardWind.particleEmitter.Emit();
}

function TargetInteractives() {
	// find the closest interactive object and set it as target if within range
	var closestDistance = 99.0;
	_target = null;
	
	for (var i : GameObject in allInteractives)  { 
		var distance = Vector3.Distance(transform.position, i.transform.position);
		
	    if (distance <= Mathf.Min(closestDistance, i.GetComponent(Interactive).interactDistance))
	    {
	    	closestDistance = distance;
	    	_target = i;
		}
	}
	
	if (HasTarget()) _target.GetComponent(Interactive).Highlight();
}

function InteractWithTarget() {
	if (HasTarget()) {
		moveSpeed = 0;
		_target.GetComponent(Interactive).Interact(transform.position);
		talking = !talking;
	}
}

function Update() {	
	if (!isControllable)
	{
		// kill all inputs if not controllable.
		Input.ResetInputAxes();
	}
	
	// Extra time to jump when falling off a ledge
	if (!IsGrounded())
	{
		if (ledgeGrace >= 0)
			ledgeGrace -= Time.deltaTime * 5;
		else
			ledgeGrace = 0;
	}
	else
		ledgeGrace = 1.0;
	
	// Set the appropriate interactive as the target
	TargetInteractives();
	
	// Jump button
	if (Input.GetButtonDown ("Jump"))
	{
		lastJumpButtonTime = Time.time;
	}
	
	// Hovering
	if (Input.GetButtonDown("Jets"))
	{
		if (!IsGrounded())
		{
			hovering = true;
			if (verticalSpeed < 0) verticalSpeed *= hoverStartFallDrag;
		}
		else
		{
			if (HasTarget()) InteractWithTarget();
			else
			{
				pushChargeTimer += pushChargeSpeed * Time.deltaTime;
			}
		}
	}
	if (Input.GetButton("Jets") && IsGrounded())
	{
		// Power up the push power
		if (pushChargeTimer <= 1 && pushChargeTimer > 0)
		{
			pushChargeTimer += pushChargeSpeed * Time.deltaTime;
			if (pushChargeTimer > 1)
				pushChargeTimer = 1;
			
			Time.timeScale = 1.0 - (pushChargeSpeed/2.5);
		}
	}
	if (Input.GetButtonUp("Jets"))
	{
		if (pushChargeTimer > 0)
		{		
			// Release the push power!
			pushing = true;
			pushSphere.Trigger(pushChargeTimer);
			pushChargeTimer = 0;
			Time.timeScale = 1;
		}
		hovering = false;
	}
	
	if (!IsTalking()) UpdateSmoothedMovementDirection();
	
	// Apply gravity
	// - extra power jump modifies gravity
	// - controlledDescent mode modifies gravity
	ApplyGravity ();
	
	// Apply jumping logic
	ApplyJumping ();
	
	
	
	if(IsTalking())
	{
		// Face our target
		var target = _target.transform.position - transform.position;
		target.Normalize();
		moveDirection = Vector3.Lerp(moveDirection, target, 0.05);
	}
	else
	{
		// Calculate actual motion
		var modifiedMoveSpeed = IsDoubleJumping() ? moveSpeed * doubleJumpDrag : moveSpeed;
		//var movement = moveDirection * modifiedMoveSpeed + Vector3 (0, verticalSpeed, 0) + inAirVelocity;
		//var modifiedInAirVelocity = IsDoubleJumping() ? 
		var movement = moveDirection * modifiedMoveSpeed + Vector3(0, verticalSpeed, 0) + inAirVelocity;
		movement *= Time.deltaTime;
		
		// Move the controller
		var controller : CharacterController = GetComponent(CharacterController);
		collisionFlags = controller.Move(movement);
		var shadowY = transform.position.y + 4;
		/*if (IsJumping())
		{
			shadowY = lastJumpStartHeight + 4;
			var jumpingHeight = transform.position.y - lastJumpStartHeight;
			shadowY -= jumpingHeight/2;
			//shadow.material.color.a = (4.0 - jumpingHeight) / 4.0;
			//Debug.Log(shadow.material.color.a);
		}*/
	}
	
	// VISUAL sector
	// Add a shadow to the character
	// TODO: shadow disappears when you talk to NPCs. Why is that? Fix it!
	shadow.transform.position = Vector3(transform.position.x, shadowY, transform.position.z);
	
	// Turn on/off hovering effects
	forwardWind.emit = IsHovering();
	
	// Activate push charging effects
	if (pushChargeTimer > 0)
	{
		renderer.material.color = Color.Lerp(Color.white, Color.red, pushChargeTimer);
	}
	else
		renderer.material.color = Color.white;
	
	// ANIMATION sector
	if(_animation) {
		if(_characterState == CharacterState.Jumping)
		{
			if(!jumpingReachedApex) {
				_animation[jumpPoseAnimation.name].speed = jumpAnimationSpeed;
				_animation[jumpPoseAnimation.name].wrapMode = WrapMode.ClampForever;
				_animation.CrossFade(jumpPoseAnimation.name);
			} else {
				_animation[jumpPoseAnimation.name].speed = -landAnimationSpeed;
				_animation[jumpPoseAnimation.name].wrapMode = WrapMode.ClampForever;
				_animation.CrossFade(jumpPoseAnimation.name);
			}
		}
		else
		{
			if(controller.velocity.sqrMagnitude < 0.1) {
				_animation.CrossFade(idleAnimation.name);
			}
			else
			{
				if(_characterState == CharacterState.Running) {
					_animation[runAnimation.name].speed = Mathf.Clamp(controller.velocity.magnitude, 0.0, runMaxAnimationSpeed);
					_animation.CrossFade(runAnimation.name);
				}
				else if(_characterState == CharacterState.Walking) {
					_animation[walkAnimation.name].speed = Mathf.Clamp(controller.velocity.magnitude, 0.0, walkMaxAnimationSpeed);
					_animation.CrossFade(walkAnimation.name);
				}
				
			}
		}
	}
	// ANIMATION sector
	
	// Set rotation to the move direction
	if (IsGrounded())
	{
		transform.rotation = Quaternion.LookRotation(moveDirection);
	}
	else
	{ //TODO: rework facing directions altogether. right now it's just kind of off
		var xzMove = movement;
		xzMove.y = 0;
		if (xzMove.sqrMagnitude > 0.001)
		{
			//transform.rotation = Quaternion.LookRotation(xzMove);
		}
	}
	
	// We are in jump mode but just became grounded
	if (IsGrounded())
	{
		lastGroundedTime = Time.time;
		inAirVelocity = Vector3.zero;
		if (jumping || doubleJumping || hovering)
		{
			if (hovering || doubleJumping)
			{
				moveSpeed = 0;
			}
		
			jumping = false;
			doubleJumping = false;
			hovering = false;
			SendMessage("DidLand", SendMessageOptions.DontRequireReceiver);
		}
	}
}

function OnControllerColliderHit (hit : ControllerColliderHit )
{
	//Debug.DrawRay(hit.point, hit.normal);
	//if (hit.moveDirection.y > 0.01)
	return;
}

function HasTarget() {
	return _target != null;
}

function GetSpeed () {
	return moveSpeed;
}

function IsJumping () {
	return jumping;
}

function IsDoubleJumping() {
	return doubleJumping;
}

function IsHovering() {
	return hovering;
}

function IsTalking() {
	return talking;
}

function IsPushing() {
	return pushing;
}

function StopPushing() {
	pushing = false;
}

function IsGrounded () {
	var grounded = (collisionFlags & CollisionFlags.CollidedBelow) != 0;
	if (!grounded)
	{
		var hit:RaycastHit;
		if (Physics.Raycast(transform.position, -Vector3.up, hit))
		{
			//Debug.Log(hit.distance);
			if (hit.distance < 1.1)
				grounded = true;
		}
	}
	return grounded;
}

function IsHittingAWall() {
	return (collisionFlags & CollisionFlags.CollidedSides) != 0;
}

function GetDirection () {
	return moveDirection;
}

function GetTarget() : GameObject {
	return _target;
}

function IsMovingBackwards () {
	return movingBack;
}

function GetLockCameraTimer ()
{
	return lockCameraTimer;
}

function IsMoving ()  : boolean
{
	return Mathf.Abs(Input.GetAxisRaw("Vertical")) + Mathf.Abs(Input.GetAxisRaw("Horizontal")) > 0.5;
}

function HasJumpReachedApex ()
{
	return jumpingReachedApex;
}

function IsGroundedWithTimeout ()
{
	return lastGroundedTime + groundedTimeout > Time.time;
}

function Reset ()
{
	gameObject.tag = "Player";
}

