// TODO: add Time.deltaTime to all player movements

// Require a character controller to be attached to the same game object
@script RequireComponent(CharacterController)

public var idleAnimation : AnimationClip;
public var walkAnimation : AnimationClip;
public var runAnimation : AnimationClip;
public var jumpPoseAnimation : AnimationClip;

public var forwardWind : ParticleEmitter;
public var upwardWind : ParticleEmitter;
private var wallSphere : SphereCollider;

public var walkMaxAnimationSpeed : float = 0.75;
public var runMaxAnimationSpeed : float = 1.0;
public var jumpAnimationSpeed : float = 1.15;
public var landAnimationSpeed : float = 1.0;

private var _animation : Animation;
private var _target : GameObject;
private var allInteractives : GameObject[];

var shadow : Projector;
private var pushSphere;

enum CharacterState {
	Idle = 0,
	Walking = 1,
	Running = 2,
	Jumping = 3,
}

private var _characterState : CharacterState;
private var lock : boolean = false;

// Counters
var border1 = "===Counters";
var jumpCounterMax : float = 		0.4;			// How long we can actively jump higher
private var jumpCounter : float = 	0.0;
var hoverCounterMax : float = 		1.2;			// How long we can hover
private var hoverCounter : float = 	0.0;
var hoverTimeoutMax : float =		0.33;			// How long until we can hover
private var hoverTimeout : float =	0.0;
var ledgeGraceMax : float =			1.0;			// How long we can jump while falling
private var ledgeGrace : float = 	ledgeGraceMax;

// Character variables
var border2 = "===Character variables";
var walkSpeed : float = 			9.0;			// The max moving speed
var jumpHeight : float =			0.9;			// The height of the shortest jump
var turnJumpHeight : float =		1.0;			// The height of the shortest jump when turning
var jumpAccel : float =				0.6;			// The acceleration applied to an extended jump
var hoverAccel : float =			0.78;			// The acceleration applied when hovering
private var moveDirection = 		Vector3.zero;	// Character's current forward axis
private var moveSpeed : float = 	0.0;			// Character's current forward magnitude
private var verticalSpeed : float = 0.0;			// Character's current speed along the Y axis
var initialHoverFallSpeed : float = -3.0;			// The set speed hovering will start at
var inAirControlAcceleration :float=3.0;			// ? - the amount of control we have in air I think
var speedSmoothing : float = 		10.0;			// Abstractly defined how fast the character turns
var hoverDrag : float =				0.5;			// The percentage of your in-air speed while hovering

// World globals
var border3 = "===World globals";
var gravity : float = 				42.0;			// Forces pulling downward
private var jumping : boolean =		false;			// Are we jumping?
private var hovering : boolean =	false;			// Are we hovering?
private var turning : boolean = 	false;			// Are we running and doing a 180?
var angleOfOneEighty : float = 		30; 			// The leniancy of doing a 180 while running
var maxInAirSpeed : float = 		1.0;			// The max moving speed while in air

var border5 = "===Leftovers";
// The speed when walking



var canJump = true;
var canHover = true;

var canClimb = false;


// The camera doesnt start following the target immediately but waits for a split second to avoid too much waving around.
private var lockCameraTimer = 0.0;




var pushChargeLength = 3.0;
private var pushChargeTimer = 0.0;

// The last collision flags returned from controller.Move
private var collisionFlags : CollisionFlags;

// Are we jumping? (Initiated with jump button and not grounded yet)
private var jumpingReachedApex = false;
private var talking = false;

// Are we moving backwards (This locks the camera to not do a 180 degree spin)
private var movingBack = false;
// Is the user pressing any keys?
private var isMoving = false;
// Last time the jump button was clicked down
private var lastJumpButtonTime = -10.0;
// Last time we performed a jump
private var lastJumpTime = -1.0;


// the height we jumped from (Used to determine for how long to apply extra jump power after jumping.)
private var lastJumpStartHeight = 0.0;


private var inAirVelocity = Vector3.zero;

private var lastGroundedTime = 0.0;


private var isControllable = true;

function OnEnable() {
	allInteractives = GameObject.FindGameObjectsWithTag("Interactive");
	
	// find 'invisible' physics (representing cavities) and disable collision
	var gos : GameObject[];
	gos = GameObject.FindGameObjectsWithTag("AI Borders");
	
	for (var go : GameObject in gos)  {
		Physics.IgnoreCollision(go.collider, collider);
		go.renderer.material.color.a = 0;
	}
}

function Awake ()
{
	wallSphere = GetComponent(SphereCollider);
	
	moveDirection = transform.TransformDirection(Vector3.forward);
	
	pushSphere = GameObject.Find("PushSphere").GetComponent(PushSphere);
	
	_animation = GetComponent(Animation);
	if(!_animation)
	Debug.Log("The character you would like to control doesn't have animations. Moving her might look weird.");
	
	/*
	public var idleAnimation : AnimationClip;
	public var walkAnimation : AnimationClip;
	public var runAnimation : AnimationClip;
	public var jumpPoseAnimation : AnimationClip;
	*/
	if(!idleAnimation) {
		_animation = null;
		Debug.Log("No idle animation found. Turning off animations.");
	}
	if(!walkAnimation) {
		_animation = null;
		Debug.Log("No walk animation found. Turning off animations.");
	}
	if(!runAnimation) {
		_animation = null;
		Debug.Log("No run animation found. Turning off animations.");
	}
	if(!jumpPoseAnimation && canJump) {
		_animation = null;
		Debug.Log("No jump animation found and the character has canJump enabled. Turning off animations.");
	}
	
}


function UpdateSmoothedMovementDirection ()
{
	var cameraTransform = Camera.main.transform;
	var grounded = IsGrounded();
	
	// Forward vector relative to the camera along the x-z plane
	var forward = cameraTransform.TransformDirection(Vector3.forward);
	forward.y = 0;
	forward = forward.normalized;
	
	// Right vector relative to the camera
	// Always orthogonal to the forward vector
	var right = Vector3(forward.z, 0, -forward.x);
	
	var v = lock ? 0 : Input.GetAxisRaw("Vertical");
	var h = lock ? 0 : Input.GetAxisRaw("Horizontal");
	
	// Are we moving backwards or looking backwards
	var wasMoving = isMoving;
	isMoving = Mathf.Abs (h) > 0.1 || Mathf.Abs (v) > 0.1;
	
	// Target direction relative to the camera
	var targetDirection = h * right + v * forward;
	
	// Grounded controls
	if (grounded)
	{
		// Lock camera for short period when transitioning moving & standing still
		lockCameraTimer += Time.deltaTime;
		if (isMoving != wasMoving)
		lockCameraTimer = 0.0;
		
		// Smooth the speed based on the current target direction
		var curSmooth = speedSmoothing * Time.deltaTime;
		
		// Choose target speed
		//* We want to support analog input but make sure you cant walk faster diagonally than just forward or sideways
		var targetSpeed = Mathf.Min(targetDirection.magnitude, 1.0);
		targetSpeed *= walkSpeed;
		_characterState = CharacterState.Walking;
		_characterState = CharacterState.Idle;
		
		// We store speed and direction seperately,
		// so that when the character stands still we still have a valid forward direction
		// moveDirection is always normalized, and we only update it if there is user input.
		if (targetDirection != Vector3.zero)
		{
			var moveVec = moveDirection * moveSpeed;
			var targetVec = targetDirection * targetSpeed;
			var actualVec = Vector3.Lerp(moveVec, targetVec, curSmooth);
			moveSpeed = Mathf.Min(actualVec.magnitude, walkSpeed);
			
			// If it's within some degrees of behind us
			// then just move directly backward
			// This will avoid the awkward instant spin-around
			var angle = Mathf.Acos(Vector3.Dot(targetDirection, moveDirection)) * Mathf.Rad2Deg;
			if (!float.IsNaN(angle) && angle > 180 - angleOfOneEighty)
			{
				turning = true;
				if (moveSpeed <= 0.5)
					moveDirection = -moveDirection;
			}
			else
			{
				turning = false;
				moveDirection = actualVec.normalized;
			}
		}
		else
			moveSpeed = Mathf.Lerp(moveSpeed, targetSpeed, curSmooth);
	}
	// In air controls
	else if (!IsGrounded())
	{
		// Lock camera while in air
		if (IsJumping())
			lockCameraTimer = 0.0;
		
		// Restrict air movement
		if (isMoving)
		{
			inAirVelocity += targetDirection.normalized * Time.deltaTime * inAirControlAcceleration;
			if (inAirVelocity.magnitude > maxInAirSpeed)
			inAirVelocity = Vector3.Normalize(inAirVelocity) * maxInAirSpeed;
		}
	}
		
}

function ApplyJumping ()
{
	// Apply the vertical speed boost for jumping actions
	if (jumpCounter > 0)
	{
		verticalSpeed += jumpAccel * Time.deltaTime;
		jumpCounter -= Time.deltaTime;
	}
	else if (hoverCounter > 0)
	{
		//SmokePuff();
		verticalSpeed += hoverAccel * Time.deltaTime;
		hoverCounter -= Time.deltaTime;
	}
	
	// Decrement any misc. counters to do with jumping actions
	if (hoverTimeout > 0)
	{
		hoverTimeout -= Time.deltaTime;
	}
}

function ApplyGravity ()
{
	if (isControllable)// don't move player at all if not controllable.
	{
		// Test if we've reached the apex of the initial jump
		if (IsJumping() &&
			!jumpingReachedApex &&
			verticalSpeed <= 0.0)
		{
			ReachedApex();
		}
		
		// Test if we've hit the ground after jumping but *not* falling
		if (IsGrounded () && jumpingReachedApex)
		{
			Land();
		}
		
		// Fall to the ground
		else
		{
			if (IsGrounded() && !IsJumping())
				verticalSpeed = 0;
			else
				verticalSpeed -= gravity * Time.deltaTime;
		}
	}
}

function CalculateJumpVerticalSpeed (targetJumpHeight : float)
{
	// Enable holding down the button for more height
	//jumpHoldCounter = jumpHoldLength;

	// From the jump height and gravity we deduce the upwards speed
	// for the character to reach at the apex.
	return Mathf.Sqrt(2 * targetJumpHeight * gravity);
}

function SmokePuff()
{
	upwardWind.particleEmitter.Emit();
}

function TargetInteractives() {
	// find the closest interactive object and set it as target if within range
	var closestDistance = 99.0;
	_target = null;
	
	for (var i : GameObject in allInteractives) {
		var distance = Vector3.Distance(transform.position, i.transform.position);
		
		if (distance <= Mathf.Min(closestDistance, i.GetComponent(Interactive).interactDistance))
		{
			closestDistance = distance;
			_target = i;
		}
	}
	
	if (HasTarget()) _target.GetComponent(Interactive).Highlight();
}

function InteractWithTarget() {
	if (HasTarget()) {
		moveSpeed = 0;
		_target.GetComponent(Interactive).Interact(transform.position);
		talking = !talking;
	}
}



function ReachedApex() {
	jumpingReachedApex = true;
	hoverTimeout = hoverTimeoutMax/4.0f;
	SendMessage("DidJumpReachApex", SendMessageOptions.DontRequireReceiver);
}
function Land() {
	verticalSpeed = 0.0;
	
	lastGroundedTime = Time.time;
	inAirVelocity = Vector3.zero;
	SendMessage("DidLand", SendMessageOptions.DontRequireReceiver);
	
	jumping = false;
	jumpingReachedApex = false;
	StopJumping();
	StopHovering();
}
function StartJumping() {
	jumpCounter = jumpCounterMax;
	hoverCounter = 0;
	
	ledgeGrace = 0;
	jumping = true;
	lastJumpTime = Time.time;
	lastJumpStartHeight = transform.position.y;
	_characterState = CharacterState.Jumping;
	
	if (turning)
	{
		moveDirection = -moveDirection;
		verticalSpeed = CalculateJumpVerticalSpeed(turnJumpHeight);
	}
	else
		verticalSpeed = CalculateJumpVerticalSpeed(jumpHeight);
}
function StartHovering() {
	//verticalSpeed += 1.0f;
	jumpCounter = 0;
	hoverCounter = hoverCounterMax;
	
	hovering = true;
	_characterState = CharacterState.Jumping;
	
	verticalSpeed = initialHoverFallSpeed;
}
function StopJumping() {
	// Doesn't necessarily mean we're not jumping, just that we're not actively trying to anymore
	jumpCounter = 0;
}
function StopHovering() {
	// Necessarily means we're not hovering, there is no follow through once we stop
	hovering = false;
	hoverCounter = 0;
	hoverTimeout = hoverTimeoutMax;
}

function Update() {
	if (!isControllable)
	{
		// kill all inputs if not controllable.
		Input.ResetInputAxes();
	}
	
	/*if (pushLockTimer > 0)
	{
		pushLockTimer -= Time.deltaTime;
		if (pushLockTimer <= 0)
			PushLock(false);

		lock = true;
	}
	else lock = false;*/
	Debug.Log("========================");
	//Debug.Log("Lock: " + lock);
	//Debug.Log("jumpCounter: " + jumpCounter);
	//Debug.Log("jumping: " + IsJumping());
	//Debug.Log("Hovr: " + hoverCounter);
	Debug.Log("grnd: " + IsGrounded());
	//Debug.Log("apex: " + jumpingReachedApex);
	Debug.Log("vspd: " + verticalSpeed);
	//Debug.Log("hoverTimeout: " + hoverTimeout);
	//Debug.Log("turning: " + turning);
	
	// Extra time to jump when falling off a ledge
	if (!IsGrounded())
	{
		if (ledgeGrace >= 0)	ledgeGrace -= Time.deltaTime * 5;
		else					ledgeGrace = 0;
	}
	else
		ledgeGrace = 1.0;
	
	// Set the appropriate interactive as the target
	TargetInteractives();
	
	// Jump button
	if (!lock)
	{
		/*if (Input.GetButtonDown ("Jump"))
		{
			if (false && pushChargeTimer == 0)
			{
				lastJumpButtonTime = Time.time;
			}
			jumpHoldCounter = jumpHoldLength;
		}*/
		if (Input.GetButtonDown("Jump"))
		{
			if (IsGrounded() || ledgeGrace > 0)
			{
				StartJumping();
			}
		}
		if (Input.GetButton("Jump") &&
			jumpingReachedApex &&
			IsJumping() &&
			!IsHovering() &&
			hoverTimeout < 0)
		{
			StartHovering();
		}
		if (Input.GetButtonUp("Jump"))
		{
			StopJumping();
			StopHovering();
		}
		
		// Hovering
		/*if (Input.GetButtonDown("Jets"))
		{
			if (!IsGrounded())
			{
				hovering = true;
				if (verticalSpeed < 0) verticalSpeed *= hoverStartFallDrag;
			}
			else
			{
				if (HasTarget()) InteractWithTarget();
				else
				{
					PushCharge(true);
				}
			}
		}
		if (Input.GetButton("Jets"))
		{
			if (pushChargeTimer > 0)
			{
				PushCharge(true);
			}
		}
		if (Input.GetButtonUp("Jets"))
		{
			hoverTimeoutCounter = 0;
			hovering = false;
			PushCharge(false);
		}*/
	}
	
	if (!IsTalking()) UpdateSmoothedMovementDirection();
	
	// Apply gravity
	// - extra power jump modifies gravity
	// - controlledDescent mode modifies gravity
	ApplyGravity ();
	
	// Apply jumping logic
	ApplyJumping ();
	
	
	//Debug.Log(IsJumping() + " / " + canClimb);
	/*if (IsJumping() && canClimb)
	{
		lock = true;
		verticalSpeed = 0;
	}*/
	if(IsTalking())
	{
		// Face our target
		var target = _target.transform.position - transform.position;
		target.Normalize();
		moveDirection = Vector3.Lerp(moveDirection, target, 0.05);
	}
	else
	{
		// Calculate actual motion
		var _moveSpeed = moveSpeed;//IsDoubleJumping() ? moveSpeed * doubleJumpDrag : moveSpeed;
		if (IsHovering()) _moveSpeed *= hoverDrag;
		var movement = moveDirection * _moveSpeed + Vector3(0, verticalSpeed, 0) + inAirVelocity;
		movement *= Time.deltaTime;
		
		// Move the controller
		var controller : CharacterController = GetComponent(CharacterController);
		collisionFlags = controller.Move(movement);
	}
	
	// VISUAL sector
	// Add a shadow to the character
	var shadowY = transform.position.y + 4;
	shadow.transform.position = Vector3(transform.position.x, shadowY, transform.position.z);
	
	// Turn on/off hovering effects
	forwardWind.emit = IsHovering();
	
	// push charge
	if (pushChargeTimer > 0)
		renderer.material.color = Color.Lerp(Color.white, Color.red, pushChargeTimer/pushChargeLength);
	else
		renderer.material.color = Color.white;
	
	// ANIMATION sector
	if(_animation) {
		if(_characterState == CharacterState.Jumping)
		{
			if(!jumpingReachedApex) {
				_animation[jumpPoseAnimation.name].speed = jumpAnimationSpeed;
				_animation[jumpPoseAnimation.name].wrapMode = WrapMode.ClampForever;
				_animation.CrossFade(jumpPoseAnimation.name);
			} else {
				_animation[jumpPoseAnimation.name].speed = -landAnimationSpeed;
				_animation[jumpPoseAnimation.name].wrapMode = WrapMode.ClampForever;
				_animation.CrossFade(jumpPoseAnimation.name);
			}
		}
		else
		{
			if(controller.velocity.sqrMagnitude < 0.1) {
				_animation.CrossFade(idleAnimation.name);
			}
			else
			{
				if(_characterState == CharacterState.Running) {
					_animation[runAnimation.name].speed = Mathf.Clamp(controller.velocity.magnitude, 0.0, runMaxAnimationSpeed);
					_animation.CrossFade(runAnimation.name);
				}
				else if(_characterState == CharacterState.Walking) {
					_animation[walkAnimation.name].speed = Mathf.Clamp(controller.velocity.magnitude, 0.0, walkMaxAnimationSpeed);
					_animation.CrossFade(walkAnimation.name);
				}
				
			}
		}
	}
	// ANIMATION sector
	
	// Set rotation to the move direction
	if (IsGrounded() || turning)
	{
		transform.rotation = Quaternion.LookRotation(moveDirection);
	}
	else
	{ //TODO: rework facing directions altogether. right now it's just kind of off
		var xzMove = movement;
		xzMove.y = 0;
		if (xzMove.sqrMagnitude > 0.001)
		{
			//transform.rotation = Quaternion.LookRotation(xzMove);
		}
	}
	
	// We are in jump mode but just became grounded
	/*if (IsGrounded())
	{
		lastGroundedTime = Time.time;
		inAirVelocity = Vector3.zero;
		if (IsJumping() || IsHovering())
		{
			//jumping = false;
			//hovering = false;
			SendMessage("DidLand", SendMessageOptions.DontRequireReceiver);
		}
	}*/
}

function IsLocked() {
	return lock;
}

function PushCharge(active : boolean) {
	if (active)
	{
		Time.timeScale = 0.8;
		if (pushChargeTimer < pushChargeLength)
		{
			pushChargeTimer += Time.deltaTime;
			if (pushChargeTimer > pushChargeLength)
				pushChargeTimer = pushChargeLength;
		}
	}
	else
	{
		if (pushChargeTimer == pushChargeLength)
		{
			pushing = true;
			pushSphere.Trigger(1.0);
		}
		pushChargeTimer = 0;
		Time.timeScale = 1;
	}
}

function OnControllerColliderHit (hit : ControllerColliderHit )
{
	//Debug.DrawRay(hit.point, hit.normal);
	//if (hit.moveDirection.y > 0.01)
	return;
}

function HasTarget() {
	return _target != null;
}

function GetSpeed () {
	return moveSpeed;
}

function IsJumping () {
	return jumping;
}

function IsHovering() {
	return hovering;
}

function IsTalking() {
	return talking;
}

function StopPushing() {
	pushing = false;
}

function IsTurning() {
	return turning;
}

function IsGrounded () {
	var grounded = (collisionFlags & CollisionFlags.CollidedBelow) != 0;
	if (!grounded)
	{
		var hit:RaycastHit;
		if (Physics.Raycast(transform.position, -Vector3.up, hit))
		{
			//Debug.Log(hit.distance);
			if (hit.distance < 1.1)
			{
				grounded = true;
			}
		}
	}
	return grounded;
}

function IsHittingAWall() {
	return (collisionFlags & CollisionFlags.CollidedSides) != 0;
}

function GetDirection () {
	return moveDirection;
}

function GetTarget() : GameObject {
	return _target;
}

function IsMovingBackwards () {
	return movingBack;
}

function GetLockCameraTimer ()
{
	return lockCameraTimer;
}

function GetCameraFocusHeight()
{
	return lastJumpStartHeight;
}

function IsMoving ()  : boolean
{
	return Mathf.Abs(Input.GetAxisRaw("Vertical")) + Mathf.Abs(Input.GetAxisRaw("Horizontal")) > 0.5;
}

function HasJumpReachedApex ()
{
	return jumpingReachedApex;
}
function Reset ()
{
	gameObject.tag = "Player";
}